addbreakpoint; Debugger methods; ALL; ; https://github.com/leuat/TRSE/raw/master/resources/text/help/m/addbreakpoint.rtf
disassemble; Debugger methods; ALL; ; 
initrandom; Init functions; C64, MEGA65, X16,PLUS4, C128, APPLEII, SNES, ORIC; ; 
initrandom256; Init functions; C64, MEGA65, PLUS4, C128, VIC20, APPLEII, SNES, ORIC; ; 
initsinetable; Init functions; MOS6502; ; https://github.com/leuat/TRSE/raw/master/resources/text/help/m/initsinetable.rtf
DefineScreen; Init functions; MOS6502; ; 
SetColorMemoryAddress; Init functions; VIC20; ; 
initmoveto; Init functions; C64, MEGA65, PLUS4, X16,C128, VIC20, PET,  NES; ; 
initprintdecimal; Init functions; MOS6502; ; 
initeightbitmul; Init functions; MOS6502; ; 
init16x8mul; Init functions; MOS6502; ; 
init16x8div; Init functions; MOS6502; ; 
init8x8div; Init functions; MOS6502; ; 
initprintstring; Init functions; C64, MEGA65, PLUS4, C128; ; 
initjoystick; Init functions; C64, MEGA65, PLUS4, C128, VIC20; ; 
initatan2; Init functions; MOS6502; ; 
initdrawtextbox; Init functions; MOS6052; ; 
initJoy1; Init functions; C64, MEGA65, VIC20; ; 
initJoy2; Init functions; C64, MEGA65; ; 
initBcd; Init functions; MOS6502; ; 
initGetKey; Init functions; C64, MEGA65, C128; ; 
initVbm; VIC20 bitmap mode routines; VIC20; ; 
vbmSetDisplayMode; VIC20 bitmap mode routines; VIC20; number; 
vbmResetDisplayMode; VIC20 bitmap mode routines; VIC20; ; 
vbmSetColumn; VIC20 bitmap mode routines; VIC20; byte; 
vbmSetPosition1; VIC20 bitmap mode routines; VIC20; byte, byte; 
vbmSetPosition2; VIC20 bitmap mode routines; VIC20; byte, byte; 
vbmSetPosition4; VIC20 bitmap mode routines; VIC20; byte, byte; 
vbmNextColumn; VIC20 bitmap mode routines; VIC20; ; 
vbmDebug; VIC20 bitmap mode routines; VIC20; number; 
vbmClear; VIC20 bitmap mode routines; VIC20; byte; 
vbmClearColor; VIC20 bitmap mode routines; VIC20; byte; 
vbmDrawTile; VIC20 bitmap mode routines; VIC20; address; 
vbmDrawTileO; VIC20 bitmap mode routines; VIC20; address; 
vbmDrawTileE; VIC20 bitmap mode routines; VIC20; address; 
vbmClearTile; VIC20 bitmap mode routines; VIC20; address; 
vbmClearBlock; VIC20 bitmap mode routines; VIC20; ; 
vbmDrawTileMap; VIC20 bitmap mode routines; VIC20; address, address, byte, byte, byte, byte; 
vbmDrawTileMapO; VIC20 bitmap mode routines; VIC20; address, address, byte, byte, byte, byte; 
vbmDrawTileMapE; VIC20 bitmap mode routines; VIC20; address, address, byte, byte, byte, byte; 
vbmClearTileMap; VIC20 bitmap mode routines; VIC20; address, address, byte, byte, byte, byte; 
vbmTestPixel; VIC20 bitmap mode routines; VIC20; byte, byte; 
vbmTestPixel2; VIC20 bitmap mode routines; VIC20; byte, byte; 
vbmTestTilePixel; VIC20 bitmap mode routines; VIC20; address, byte, byte; 
vbmTestTilePixel2; VIC20 bitmap mode routines; VIC20; address, byte, byte; 
vbmDrawDot; VIC20 bitmap mode routines; VIC20; byte, byte; 
vbmClearDot; VIC20 bitmap mode routines; VIC20; byte, byte; 
vbmDrawDotE; VIC20 bitmap mode routines; VIC20; byte, byte; 
vbmDrawBlot; VIC20 bitmap mode routines; VIC20; byte, byte; 
vbmClearBlot; VIC20 bitmap mode routines; VIC20; byte, byte; 
vbmDrawBlotE; VIC20 bitmap mode routines; VIC20; byte, byte; 
vbmScrollLeft; VIC20 bitmap mode routines; VIC20; ; 
vbmScrollRight; VIC20 bitmap mode routines; VIC20; ; 
vbmScrollFixTop; VIC20 bitmap mode routines; VIC20; ; 
vbmScrollFixBottom; VIC20 bitmap mode routines; VIC20; ; 
vbmInitScreenShiftLeft; VIC20 bitmap mode routines; VIC20; byte; 
vbmInitScreenShiftRight; VIC20 bitmap mode routines; VIC20; byte; 
vbmScreenShiftLeft; VIC20 bitmap mode routines; VIC20; byte, byte; 
vbmScreenShiftRight; VIC20 bitmap mode routines; VIC20; byte, byte; 
vbmSpriteStitch; VIC20 bitmap mode routines; VIC20; address, address, byte; 
vbmSpriteShiftR; VIC20 bitmap mode routines; VIC20; address, address, byte, byte, address; 
vbmSpriteShiftL; VIC20 bitmap mode routines; VIC20; address, address, byte, byte, address; 
vbmSpriteShiftSR; VIC20 bitmap mode routines; VIC20; address, address, byte, byte, address; 
vbmSpriteShiftSL; VIC20 bitmap mode routines; VIC20; address, address, byte, byte, address; 
vbmDrawSprite8; VIC20 bitmap mode routines; VIC20; address, address; 
vbmDrawSprite8E; VIC20 bitmap mode routines; VIC20; address, address; 
vbmClearSprite8; VIC20 bitmap mode routines; VIC20; address, address; 
vbmDrawSprite16; VIC20 bitmap mode routines; VIC20; address, address, address; 
vbmDrawSprite16E; VIC20 bitmap mode routines; VIC20; address, address, address; 
vbmClearSprite16; VIC20 bitmap mode routines; VIC20; address, address, address; 
vbmDrawSpriteSlice; VIC20 bitmap mode routines; VIC20; address, byte, byte; 
vbmDrawSpriteSliceE; VIC20 bitmap mode routines; VIC20; address, byte, byte; 
vbmClearSpriteSlice; VIC20 bitmap mode routines; VIC20; address, byte, byte; 
vbmDrawText; VIC20 bitmap mode routines; VIC20; address, address, byte, byte, byte; 
vbmDrawTextO; VIC20 bitmap mode routines; VIC20; address, address, byte, byte, byte; 
vbmDrawTextE; VIC20 bitmap mode routines; VIC20; address, address, byte, byte, byte; 
vbmClearText; VIC20 bitmap mode routines; VIC20; address, address, byte, byte, byte; 
vbmDrawSmallTextO; VIC20 bitmap mode routines; VIC20; address, address, byte, byte, byte; 
vbmDrawSmallTextE; VIC20 bitmap mode routines; VIC20; address, address, byte, byte, byte; 
vbmClearSmallText; VIC20 bitmap mode routines; VIC20; address, address, byte, byte, byte; 
vbmDrawBCD; VIC20 bitmap mode routines; VIC20; address, address, byte, byte, byte; 
vbmDrawSmallBCD; VIC20 bitmap mode routines; VIC20; address, address, byte, byte, byte; 
vbmDrawSmallBCDO; VIC20 bitmap mode routines; VIC20; address, address, byte, byte, byte; 
vbmCopyToBuffer; VIC20 bitmap mode routines; VIC20; address, byte, byte; 
vbmCopyFromBuffer; VIC20 bitmap mode routines; VIC20; address, byte, byte; 
vbmDrawSprite; VIC20 bitmap mode routines; VIC20; address, address; 
vbmDrawSpriteE; VIC20 bitmap mode routines; VIC20; address, address; 
vbmClearSprite; VIC20 bitmap mode routines; VIC20; address, address; 
vbmDrawSprite2; VIC20 bitmap mode routines; VIC20; address, address, address; 
vbmDrawSprite2E; VIC20 bitmap mode routines; VIC20; address, address, address; 
vbmClearSprite2; VIC20 bitmap mode routines; VIC20; address, address, address; 
fill; VIC20 bitmap mode routines; GAMEBOY,Z80, Z180; address, byte, integer; https://github.com/leuat/TRSE/raw/master/resources/text/help/m/fill.rtf
MemCpy; VIC20 bitmap mode routines; GAMEBOY,Z80, Z180; address, address, integer; 
MemCpyCont; VIC20 bitmap mode routines; GAMEBOY,Z80, Z180; integer; 
MemCpyOnHBLank; VIC20 bitmap mode routines; GAMEBOY, SPECTRUM, MSX,  TIKI100; address, address, integer; 
MemCpyOnHBLank4; VIC20 bitmap mode routines; GAMEBOY, SPECTRUM, MSX,  TIKI100; address, address, integer; 
EnableVBlank; VIC20 bitmap mode routines; GAMEBOY, SPECTRUM, MSX,  TIKI100; ; 
EnableTimer; VIC20 bitmap mode routines; GAMEBOY, SPECTRUM, MSX,  TIKI100; ; 
Halt; VIC20 bitmap mode routines; GAMEBOY, SPECTRUM, MSX,  TIKI100; ; 
Loop; VIC20 bitmap mode routines; GAMEBOY, AMSTRADCPC, VZ200 , Z80, Z180; ; 
SetSprite; VIC20 bitmap mode routines; GAMEBOY, SPECTRUM, MSX,  TIKI100; address, byte, byte, byte, byte; 
InitSprite; VIC20 bitmap mode routines; GAMEBOY, SPECTRUM, MSX,  TIKI100; address, byte, byte, byte, byte; 
InitSpriteFromData; VIC20 bitmap mode routines; GAMEBOY, SPECTRUM, MSX,  TIKI100; address, address, byte, byte, byte, byte; 
UpdateMusic; VIC20 bitmap mode routines; GAMEBOY, SPECTRUM, MSX,  TIKI100; ; 
LoadMusic; VIC20 bitmap mode routines; GAMEBOY, SPECTRUM, MSX,  TIKI100; string, byte; 
InitVBlank; VIC20 bitmap mode routines; GAMEBOY, SPECTRUM, MSX,  TIKI100; procedure; 
InitTimer; VIC20 bitmap mode routines; GAMEBOY, SPECTRUM, MSX,  TIKI100; procedure; 
Push; VIC20 bitmap mode routines; GAMEBOY, Z80, Z180; ; 
POP; VIC20 bitmap mode routines; GAMEBOY, Z80, Z180; ; 
waitforhblank; VIC20 bitmap mode routines; GAMEBOY, SPECTRUM, MSX,  TIKI100; ; 
joypad; VIC20 bitmap mode routines; GAMEBOY, SPECTRUM, MSX,  TIKI100; address, address; 
RasterIRQ; VIC20 bitmap mode routines; AMSTRADCPC, VZ200; procedure; 
InitGraphics; Atari ST routines; ATARI520ST; ; 
HLine; Atari ST routines; ATARI520ST; integer, integer, integer, integer; 
GetScreen; Atari ST routines; ATARI520ST; address; 
WaitForKeypress; Atari ST routines; ATARI520ST; ; 
keypressed; Atari ST routines; ATARI520ST; byte; https://github.com/leuat/TRSE/raw/master/resources/text/help/m/keypressed.rtf
setlores; Atari ST routines; ATARI520ST; ; 
sethires; Atari ST routines; ATARI520ST; ; 
setmedres; Atari ST routines; ATARI520ST; ; 
InitMusic; Atari ST routines; ATARI520ST; address; 
UpdateMusic; Atari ST routines; ATARI520ST; ; 
SetIRQ; Atari ST routines; ATARI520ST; procedure, address; 
SetTimerIRQ; Atari ST routines; ATARI520ST; procedure, byte; 
InitMatmul3x3; Amiga routines; Amiga, ATARI520ST; ; 
InitPoly; Amiga routines; Amiga, ATARI520ST; ; 
InitLine; Amiga routines; Amiga, ATARI520ST; ; 
InitMatmulVec; Amiga routines; Amiga, ATARI520ST; ; 
InitMatmulVecNormalZ; Amiga routines; Amiga, ATARI520ST; ; 
InitProjectToScreen; Amiga routines; Amiga, ATARI520ST; ; 
InitP61PlayerInternal; Amiga routines; Amiga, ATARI520ST; ; 
InitProjectAllVertices; Amiga routines; Amiga, ATARI520ST; ; 
InitP61Module; Amiga routines; Amiga; address; 
PlayP61Module; Amiga routines; Amiga; ; 
Poke8; Amiga routines; Amiga, ATARI520ST; address, integer, byte; 
Poke16; Amiga routines; Amiga, ATARI520ST; address, integer, integer; 
Peek16; Amiga routines; M68000; address, integer; 
Peek8; Amiga routines; M68000; address, integer; 
Poke32; Amiga routines; Amiga, ATARI520ST; address, integer, long; 
WaitVerticalBlank; Amiga routines; Amiga, ATARI520ST; ; 
SetCopperList32; Amiga routines; Amiga; address, address; 
ApplyCopperList; Amiga routines; Amiga; ; 
memcpy; Amiga routines; Amiga, ATARI520ST; address, long, address, long, long, integer; https://github.com/leuat/TRSE/raw/master/resources/text/help/m/memcpy.rtf
memcpyunroll; Amiga routines; Amiga, ATARI520ST; address, long, address, long, long, integer; https://github.com/leuat/TRSE/raw/master/resources/text/help/m/memcpyunroll.rtf
setpalette; Amiga routines; Amiga, ATARI520ST; address, address, long; 
ablit; Amiga routines; Amiga; address, address, integer, integer, integer, integer, integer, long, integer, integer, integer; https://github.com/leuat/TRSE/raw/master/resources/text/help/m/ablit.rtf
fblit; Amiga routines; Amiga; address, address, integer, integer, integer, integer, integer, long, integer, integer, integer; 
getKey; Amiga routines; C64, MEGA65, C128, VIC20; ; 
EnableInterrupt; Amiga routines; Amiga, ATARI520ST; integer; 
pusha; Amiga routines; Amiga, ATARI520ST; ; 
popa; Amiga routines; Amiga, ATARI520ST; ; 
toPointer; Amiga routines; Amiga, ATARI520ST; long; 
swap; Amiga routines; Amiga, ATARI520ST; address, address, byte; 
memcpyunroll16; Amiga routines; M6809; address, address, integer; 
InitCustomCopperList; Amiga routines; Amiga; ; 
EndCustomCopperList; Amiga routines; Amiga; ; 
AddCopperCommand; Amiga routines; Amiga, ATARI520ST; integer, integer; 
SkipCopperCommands; Amiga routines; Amiga; integer; 
DrawLine; Amiga routines; Amiga; integer, integer, integer, integer, long, integer; 
Fill; Amiga routines; Amiga, ATARI520ST; address, long, long; 
MatMul3x3; Amiga routines; Amiga, ATARI520ST; address, address, address; 
SetRotationX; Amiga routines; Amiga, ATARI520ST; address, long, long; 
SetRotationY; Amiga routines; Amiga, ATARI520ST; address, long, long; 
SetRotationZ; Amiga routines; Amiga, ATARI520ST; address, long, long; 
SetIdentity; Amiga routines; Amiga, ATARI520ST; address; 
MatMulVec; Amiga routines; Amiga, ATARI520ST; address, address, address, integer; 
MatMulVecNormalZ; Amiga routines; Amiga, ATARI520ST; address, address, address, integer; 
MatMulVecNormal; Amiga routines; Amiga, ATARI520ST; address, address, address, integer; 
ProjectToScreen; Amiga routines; Amiga, ATARI520ST; address, integer, long, long; 
WaitForBlitter; Amiga routines; Amiga; ; 
VBIRQ; Amiga routines; Amiga; procedure; 
DisableInterrupts; Amiga routines; Amiga; ; 
ProjectAllVertices; Amiga routines; Amiga, ATARI520ST; address, address, long, long, long, long; 
Poke; Memory routines; MOS6502, Z80, Z180, M6809; address, byte, byte; 
Peek; Memory routines; MOS6502, Z80, Z180, M6809; address, byte; 
ToggleBit; Memory routines; MOS6502, M6809; address, byte, byte; 
GetBit; Memory routines; MOS6502, M6809; address, byte; 
EnableAllRam; Memory routines; C64, MEGA65, PLUS4; ; 
MemCpy; Memory routines; MOS6502; address, byte, address, byte; 
MemCpyFast; Memory routines; MOS6502, Z80, Z180, PX86; address, byte, address, byte; 
MemCpyUnroll; Memory routines; MOS6502; address, byte, address, byte; 
MemCpyUnrollReverse; Memory routines; MOS6502; address, byte, address, byte; 
BlockMemCpy; Memory routines; MOS6502; address, address, number; 
Inc; Memory routines; MOS6502, Z80, Z180, PX86, M6809; address; 
IncRange; Memory routines; MOS6502; byte, byte, byte; 
DecRange; Memory routines; MOS6502; byte, byte, byte; 
Dec; Memory routines; X16,C64, MEGA65, PLUS4, C128, VIC20, PET,  NES, OK64, ATARI2600, APPLEII, SNES, ORIC, BBCM, ACORN, ATARI800, AMSTRADCPC, VZ200 , TIKI100, SPECTRUM, MSX, Z80, Z180, GAMEBOY, PX86, M6809; address; 
Fill; Memory routines; MOS6502, PX86; address, byte, byte; 
FillFast; Memory routines; X16,C64, MEGA65, PLUS4, C128, VIC20, PET,  NES, OK64, ATARI2600, APPLEII, SNES, ORIC, BBCM, ACORN, ATARI800,PX86; address, byte, byte; 
SetMemoryConfig; Memory routines; C64, MEGA65,  VIC20, PET,  NES; byte, byte, byte; 
CopyHalfScreen; Memory routines; X16,C64, MEGA65, PLUS4, C128, VIC20, PET,  NES; address, address, byte, byte, number; 
CopyFullScreen; Memory routines; X16,C64, MEGA65, PLUS4, C128, VIC20, PET,  NES; address, address; 
Lo; Memory routines; MOS6502, Z80, Z180, M6809; address; 
Hi; Memory routines; MOS6502, Z80, Z180, M6809; address; 
bankbyte; Memory routines; MOS6502, WDC65C02, WDC65C816, CUSTOM; address; 
ToPointer; Memory routines; MOS6502; byte, byte; 
int2ptr; Memory routines; MOS6502; integer; 
CreateInteger; Memory routines; MOS6502; byte, byte; 
CreatePointer; Memory routines; MOS6502; byte, byte; 
outportb; Memory routines; X86; integer, byte; 
inportb; Memory routines; X86; integer; 
genint; Memory routines; X86; integer; 
CopyBytesShift; Memory routines; X16,C64, MEGA65, PLUS4,C128, VIC20, PET,  NES, OK64, ATARI2600, APPLEII, SNES, ORIC, BBCM, ACORN, ATARI800; address, address, byte, byte, number; 
CreateAddressTable; Memory routines; X16,C64, MEGA65, PLUS4,C128, VIC20, PET, NES, OK64, ATARI2600, APPLEII, SNES, ORIC, BBCM, ACORN, ATARI800; address, number, byte, byte; 
AddressTable; Memory routines; X16,C64, MEGA65, PLUS4,C128, VIC20, PET, NES, OK64, ATARI2600, APPLEII, SNES, ORIC, BBCM, ACORN, ATARI800; address, byte, byte; 
Nop; Memory routines; X16,C128, C64, MEGA65, PLUS4, VIC20, PET, NES, OK64, ATARI2600, APPLEII, SNES, ORIC, BBCM, ACORN, ATARI800, AMSTRADCPC, VZ200 , X86, M1ARM, AMIGA, ATARI520ST, M6809, Z80, Z180; number; 
SetMemoryConfig; Memory routines; C128; number, number, number, number, number; 
SetMemoryConfig; Memory routines; PLUS4; byte; 
Decrunch; Memory routines; C64, MEGA65, PLUS4, C128, VIC20, PET, ATARI2600, APPLEII, SNES, ORIC, BBCM, ACORN, ATARI800; address; 
DecrunchFromIndex; Memory routines; C64, MEGA65, PLUS4, C128, VIC20, PET, ATARI2600, APPLEII, SNES, ORIC, BBCM, ACORN, ATARI800; address, byte; 
CopyCharsetFromRom; Charset routines; C64, PLUS4, C128; address; 
SetCharsetLocation; Charset routines; C64,  PLUS4, C128, VIC20, MEGA65; number; 
SetScreenLocation; Charset routines; C64,  PLUS4, C128, VIC20, MEGA65; number; 
SetCharsetAndScreenLocation; Charset routines; C64, C128, MEGA65; number, number; 
SetBitmapLocation; Charset routines; C128; number; 
LoadPalette; Charset routines; NES; address; 
ReadInput; Charset routines; NES; ; 
PPUBackgroundDump; Charset routines; NES; address, byte, byte; 
PPUAttributeDump; Charset routines; NES; address, byte, byte; 
PPUSingle; Charset routines; NES; byte, byte, byte; 
PPUPoint; Charset routines; NES; byte, byte; 
PPUPointI; Charset routines; NES; integer; 
PPUWrite; Charset routines; NES; byte; 
PPURead; Charset routines; NES; byte, byte; 
LoadSong; Charset routines; NES; byte; 
PlaySong; Charset routines; NES; ; 
PPUDrawColumn; Charset routines; NES; address, byte, byte, byte; 
ToggleNMI; Charset routines; NES; number; 
ToggleVRAM32Inc; Charset routines; NES; number; 
ToggleSpriteTableAddress; Charset routines; NES; number; 
ToggleBackgroundTableAddress; Charset routines; NES; number; 
SetNameTable; Charset routines; NES; byte; 
ToggleGreyscale; Charset routines; NES; number; 
ToggleSprites; Charset routines; NES; number; 
ToggleBackground; Charset routines; NES; number; 
ToggleBorderSprites; Charset routines; NES; number; 
ToggleBorderBackground; Charset routines; NES; number; 
SetSpriteLocation; Charset routines; NES; byte; 
Split; Charset routines; NES; ; 
Scroll; Charset routines; NES; byte, byte; 
ToggleSpriteSize; Charset routines; NES; number; 
KrillLoad; Charset routines; C64, MEGA65, PLUS4; address; 
KrillLoadCompressed; Charset routines; C64, MEGA65, PLUS4; address; 
InitKrill; Charset routines; C64, MEGA65, PLUS4; ; 
Tile; Screen routines; C64, MEGA65, PLUS4, C128, VIC20, PET; address, address, address, address, byte, number; 
MoveTo; Screen routines; C64, MEGA65, PLUS4, C128, VIC20, NES,PET; byte, byte, byte; 
ScrollY; Screen routines; C64, MEGA65, PLUS4, C128; byte; 
ScrollX; Screen routines; C64, MEGA65, PLUS4, C128; byte; 
hideborderx; Screen routines; C64, MEGA65, PLUS4, C128; byte; https://github.com/leuat/TRSE/raw/master/resources/text/help/m/hideborderx.rtf
hidebordery; Screen routines; C64, MEGA65, PLUS4, C128; byte; https://github.com/leuat/TRSE/raw/master/resources/text/help/m/hidebordery.rtf
ClearScreen; Screen routines; C64, MEGA65, PLUS4, C128, VIC20, NES, PET; byte, address; 
ClearBitmap; Screen routines; C64, MEGA65, PLUS4, C128; address, byte; 
SetMultiColorMode; Screen routines; C64, MEGA65, C128; ; 
SetRegularColorMode; Screen routines; C64, MEGA65,  C128; ; 
SetBitmapMode; Screen routines; C64, MEGA65,  C128; ; 
SetTextMode; Screen routines; C64, MEGA65,  C128; ; 
SetBank; Screen routines; C64, MEGA65, C128; byte; 
ScreenOff; Screen routines; C64, MEGA65, PLUS4, C128; ; 
ScreenOn; Screen routines; C64, MEGA65, PLUS4, C128; ; 
CopyImageColorData; Screen routines; C64, MEGA65, PLUS4, C128; address, number; 
DrawTextBox; Screen routines; C64, MEGA65, PLUS4, C128, NES, VIC20, PET; address, address, byte, byte, byte, byte; 
DrawColorTextBox; Screen routines; C64, MEGA65, PLUS4, C128, NES, VIC20, PET; address, address, address, byte, byte, byte, byte, byte; 
BcdPrint; Screen routines; C64, MEGA65, PLUS4, C128, VIC20, PET,  NES, OK64; address, number; 
PrintString; String routines; C64, MEGA65, PLUS4, C128, VIC20, PET, X16; string, byte, byte; 
PrintNumber; String routines; C64, MEGA65, PLUS4, C128, VIC20, PET,  X16; byte; 
PrintDecimal; String routines; C64, MEGA65, PLUS4, C128, VIC20, PET,  X16; integer, number; 
StrToLower; String routines; C64, MEGA65, PLUS4, C128, VIC20, PET, X16, OK64; address; 
StrToUpper; String routines; C64, MEGA65, PLUS4, C128, VIC20, PET, X16, OK64; address; 
StrCmp; String routines; C64, MEGA65, PLUS4, C128, VIC20, PET, X16, OK64; string, string; 
StrSplit; String routines; C64, MEGA65, PLUS4, C128, VIC20, PET, X16, OK64; address, address, byte; 
StrGetFromIndex; String routines; C64, MEGA65, PLUS4, C128, VIC20, PET, X16, OK64; address, byte; 
SpritePos; Sprite routines; C64, MEGA65, PLUS4, C128; integer or byte, byte, byte; 
SetSpriteLoc; Sprite routines; C64, PLUS4, C128,  MEGA65; byte, byte, number; 
PlaySound; Sound/music routines; C64, MEGA65, PLUS4, C128, OK64; byte, byte, byte, byte, byte, byte, byte; 
SetFrequency; Sound/music routines; C64, MEGA65, PLUS4, C128, OK64; byte, byte; 
InitSid; Sound/music routines; C64, MEGA65, PLUS4, C128,VIC20, OK64; address; 
ClearSound; Sound/music routines; C64, MEGA65, PLUS4, C128, OK64; ; 
InitModPlayer; Vic 20 music routines; VIC20; byte, byte; 
PlayMod; Vic 20 music routines; VIC20; ; 
PlayVIC20Sid; Vic 20 music routines; VIC20; address; 
mod; Math routines; Z80, Z180, GBZ80, Z180, M6809; integer, byte; https://github.com/leuat/TRSE/raw/master/resources/text/help/m/mod.rtf
Atan2; Math routines; X16,C64, MEGA65, PLUS4, C128, VIC20, PET,  NES , OK64, BBCM, ACORN, ATARI800; byte, byte, byte, byte; 
Sqrt; Math routines; X16,C64, MEGA65, PLUS4, C128, VIC20, PET,  NES, OK64, BBCM, ACORN, ATARI800; integer or byte; 
Swap; Math routines; X16,C64, MEGA65, PLUS4, C128, VIC20, PET,  NES, OK64, ATARI2600, APPLEII, SNES, ORIC, BBCM, ACORN, ATARI800; byte, byte; 
Abs; Math routines; MOS6502, M68000, M6809, Z80; integer or byte; 
Rand; Math routines; C64, MEGA65, PLUS4, C128; byte, byte, byte; 
Random; Math routines; X16,C64, MEGA65, PLUS4, C128, VIC20, PET, ATARI2600, APPLEII, SNES, ORIC, BBCM, ACORN, ATARI800; ; 
mod; Math routines; X16,C64, MEGA65, PLUS4, C128, VIC20, NES, OK64, PET, ATARI2600, APPLEII, SNES, ORIC, BBCM, ACORN, ATARI800; integer or byte, byte; https://github.com/leuat/TRSE/raw/master/resources/text/help/m/mod.rtf
mod16; Math routines; X16,C64, MEGA65, PLUS4, C128, VIC20, NES, OK64, PET, ATARI2600, APPLEII, SNES, ORIC, BBCM, ACORN, ATARI800; integer or byte, byte; https://github.com/leuat/TRSE/raw/master/resources/text/help/m/mod16.rtf
max; Math routines; X16,C64, MEGA65, PLUS4, C128, VIC20, NES, OK64, PET, ATARI2600, APPLEII, SNES, ORIC, BBCM, ACORN, ATARI800; byte, byte; https://github.com/leuat/TRSE/raw/master/resources/text/help/m/max.rtf
min; Math routines; X16,C64, MEGA65, PLUS4, C128, VIC20, NES, OK64, PET, ATARI2600, APPLEII, SNES, ORIC, BBCM, ACORN, ATARI800; byte, byte; https://github.com/leuat/TRSE/raw/master/resources/text/help/m/min.rtf
mod; Math routines; M68000; integer, integer; https://github.com/leuat/TRSE/raw/master/resources/text/help/m/mod.rtf
IsOverlapping; Collision routines; MOS6502; byte, byte, byte, byte, byte; 
IsOverlappingWH; Collision routines; MOS6502; byte, byte, byte, byte, byte, byte; 
Wait; Other routines; MOS6502, Z80, Z180; byte; 
Jammer; Other routines; C64, MEGA65, PLUS4, C128; number, number; 
FLD; Other routines; C64, MEGA65, PLUS4, C128; byte, number; 
TransformColors; Other routines; C64, MEGA65, PLUS4, C128; address, address; 
Call; Other routines; X16,C64, MEGA65, PLUS4, C128, VIC20, PET,  NES, OK64, ATARI2600, APPLEII, SNES, ORIC, BBCM, ACORN, ATARI800, MSX, SPECTRUM, GAMEBOY, AMSTRADCPC, VZ200, Z80, Z180; address; 
Loop; Other routines; X16,C64, MEGA65, PLUS4, C128, VIC20, PET,  NES, OK64, ATARI2600, APPLEII, SNES, ORIC, BBCM, ACORN, ATARI800, Amiga, ATARI520ST, PX86, Z80, Z180, M6809; ; 
ReturnValue; Other routines; X16,C64, MEGA65, PLUS4, C128, VIC20, PET,  NES, Amiga, ATARI520ST, OK64, ATARI2600, APPLEII, SNES, ORIC, BBCM, ACORN, ATARI800, AMSTRADCPC, VZ200, Z80, Z180; byte; 
Set2MhzMode; Other routines; C128; ; 
Set1MhzMode; Other routines; C128; ; 
RightBitShift; Other routines; MOS6502; address, number; 
LeftBitShift; Other routines; MOS6502; address, number; 
BcdAdd; Other routines; MOS6502; address, address, number; 
BcdCompare; Other routines; MOS6502; address, address, number; 
BcdIsEqual; Other routines; MOS6502; address, address, number; 
BcdSub; Other routines; MOS6502; address, address, number; 
Joystick; Io ports; C64, MEGA65, PLUS4, C128, VIC20, OK64; number; 
Keypressed; Io ports; C64, MEGA65, PLUS4, C128, VIC20; byte; 
ReadJoy1; Io ports; C64, MEGA65, VIC20; ; 
ReadJoy2; Io ports; C64, MEGA65; ; 
NmiIRQ; IRQ routines; MOS6502; procedure; 
EnableRasterIRQ; IRQ routines; C64, MEGA65, PLUS4, C128, X16; ; 
StartIRQ; IRQ routines; MOS6502; byte; 
StartIRQWedge; IRQ routines; C64, MEGA65, PLUS4, C128; byte; 
StartRasterChain; IRQ routines; C64, MEGA65, PLUS4, C128; procedure, byte, number; 
CloseIRQ; IRQ routines; MOS6502, M68000; ; 
CloseIRQWedge; IRQ routines; C64, MEGA65, PLUS4, C128; ; 
EnableIRQ; IRQ routines; MOS6502, X16, MEGA65; ; 
PreventIRQ; IRQ routines; MOS6502, X16, MEGA65; ; 
DisableCIAInterrupts; IRQ routines; C64, MEGA65, PLUS4, C128,X16; ; 
RasterIRQ; IRQ routines; C64, MEGA65, PLUS4, C128; procedure, byte, number; 
RasterIRQ; IRQ routines; BBCM, ACORN, ATARI800; procedure; 
RasterIRQWedge; IRQ routines; C64, MEGA65, PLUS4, C128; procedure, byte, number; 
ReturnInterrupt; IRQ routines; MOS6502; ; 
WaitForRaster; IRQ routines; C64, MEGA65, PLUS4, C128, VIC20, OK64, GAMEBOY, SPECTRUM, MSX,  TIKI100; byte; 
WaitNoRaster; IRQ routines; C64, MEGA65, PLUS4, C128, VIC20, OK64, GAMEBOY, SPECTRUM, MSX,  TIKI100; byte; 
WaitForVerticalBlank; IRQ routines; C64, MEGA65, C128, X86, M1ARM, GAMEBOY, MSX,  TIKI100; ; 
DisableVIC20IRQ; IRQ routines; VIC20; ; 
VIAIRQ; IRQ routines; VIC20; procedure, byte, byte; 
VIARasterIRQ; IRQ routines; VIC20; procedure, byte, byte; 
init_cga_scanlines; IRQ routines; X86, M1ARM; ; 
init_playnote; IRQ routines; X86, M1ARM; ; 
init_drawline_cga; IRQ routines; X86, M1ARM; ; 
init_drawline_cga; IRQ routines; X86, M1ARM; ; 
init_keyboard_irq; IRQ routines; X86, M1ARM; ; 
SetScreenMode; IRQ routines; X86, M1ARM; byte; 
VGAClearScreen32; IRQ routines; X86, M1ARM; byte; 
VGAClearScreen16; IRQ routines; X86, M1ARM; byte; 
ScrollX; IRQ routines; X86, M1ARM; byte; 
mod; IRQ routines; PX86, M1ARM; integer, integer; https://github.com/leuat/TRSE/raw/master/resources/text/help/m/mod.rtf
SetPalette; IRQ routines; X86, M1ARM; byte, byte, byte, byte; 
SetPixel; IRQ routines; X86, M1ARM; address, integer, integer, byte; 
SetPixelCGA; IRQ routines; X86, M1ARM; address, integer, integer, byte; 
memcpy8; IRQ routines; PX86, M1ARM; address, address, integer; 
memcpy16; IRQ routines; PX86, M1ARM; address, address, integer; 
memcpy32; IRQ routines; PX86, M1ARM; address, address, integer; 
SetCgaPalette; IRQ routines; X86, M1ARM; integer; 
toPointer; IRQ routines; PX86, M1ARM; integer, integer; 
ptr; IRQ routines; PX86, M1ARM; integer, integer; 
hi; IRQ routines; PX86, M1ARM; address; https://github.com/leuat/TRSE/raw/master/resources/text/help/m/hi.rtf
lo; IRQ routines; PX86, M1ARM; address; https://github.com/leuat/TRSE/raw/master/resources/text/help/m/lo.rtf
nosound; IRQ routines; X86, M1ARM; ; 
FillW; IRQ routines; PX86, M1ARM; address, integer, integer; 
ReadKey; IRQ routines; X86, M1ARM; ; 
KeyPressed; IRQ routines; X86, M1ARM; ; 
DrawLineCGA; IRQ routines; X86, M1ARM; address, integer, integer, integer, integer, byte; 
InstallKeyboardIRQ; IRQ routines; X86, M1ARM; ; 
SetInterrupt; IRQ routines; PX86, M1ARM; byte, procedure; 
StartIRQ; IRQ routines; PX86, M1ARM; ; 
CloseIRQ; IRQ routines; PX86, M1ARM; ; 
playnote; IRQ routines; X86, M1ARM; byte; 
drawPixel; IRQ routines; OK64; byte, byte, byte; 
drawLine; IRQ routines; OK64; byte, byte, byte, byte, byte; 
drawCircleFilled; IRQ routines; OK64; byte, byte, byte, byte; 
drawRect; IRQ routines; OK64; byte, byte, byte, byte, byte; 
drawPoly; IRQ routines; OK64; byte, byte, byte, byte, byte, byte, byte; 
ClearScreen; IRQ routines; OK64; byte; 
WaitForVsync; IRQ routines; OK64; ; 
toColor; IRQ routines; OK64; byte, byte, byte; 
setPalette; IRQ routines; OK64; byte, byte, byte, byte; 
blit; IRQ routines; OK64; byte, byte, byte, byte, byte, byte; 
PrintChar; IRQ routines; OK64; , byte, byte, byte, byte; 
InputIRQ; IRQ routines; OK64; procedure; 
ResetFileList; IRQ routines; OK64; ; 
ReadNextFile; IRQ routines; OK64; ; 
LoadFile; IRQ routines; OK64; ; 
MemCpyOKVC; IRQ routines; OK64; byte, byte, byte, byte, byte, byte, byte, byte; 
setDefaultPalette; IRQ routines; OK64; ; 
fmul; IRQ routines; OK64; byte, byte; 
Set256CharMode; IRQ routines; PLUS4; ; 
VDCInit; IRQ routines; C128; byte; 
VDCWrite; IRQ routines; C128; byte, byte; 
Go80Columns; IRQ routines; C128; ; 
initmoveto80; IRQ routines; C128; ; 
moveto80; IRQ routines; C128; byte, byte, byte; 
print80; IRQ routines; C128; address, byte; 
fill80; IRQ routines; C128; byte, byte; 
VeraPoke; IRQ routines; X16; byte, byte, byte; 
VeraPokeDual; IRQ routines; X16; byte, byte, byte, byte; 
SetVideoMode; IRQ routines; X16; byte, byte, byte; 
SetVeraBank; IRQ routines; X16; byte; 
SetVeraIncrement; IRQ routines; X16; byte; 
SetVeraTileMode; IRQ routines; X16; byte, byte; 
copydatatovera; IRQ routines; X16; address, byte, byte, byte, byte; 
